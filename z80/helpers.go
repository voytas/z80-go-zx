package z80

// Pre-calculated even/odd parity flag value for each byte value
var parity = []byte{
	4, 0, 0, 4, 0, 4, 4, 0, 0, 4, 4, 0, 4, 0, 0, 4,
	0, 4, 4, 0, 4, 0, 0, 4, 4, 0, 0, 4, 0, 4, 4, 0,
	0, 4, 4, 0, 4, 0, 0, 4, 4, 0, 0, 4, 0, 4, 4, 0,
	4, 0, 0, 4, 0, 4, 4, 0, 0, 4, 4, 0, 4, 0, 0, 4,
	0, 4, 4, 0, 4, 0, 0, 4, 4, 0, 0, 4, 0, 4, 4, 0,
	4, 0, 0, 4, 0, 4, 4, 0, 0, 4, 4, 0, 4, 0, 0, 4,
	4, 0, 0, 4, 0, 4, 4, 0, 0, 4, 4, 0, 4, 0, 0, 4,
	0, 4, 4, 0, 4, 0, 0, 4, 4, 0, 0, 4, 0, 4, 4, 0,
	0, 4, 4, 0, 4, 0, 0, 4, 4, 0, 0, 4, 0, 4, 4, 0,
	4, 0, 0, 4, 0, 4, 4, 0, 0, 4, 4, 0, 4, 0, 0, 4,
	4, 0, 0, 4, 0, 4, 4, 0, 0, 4, 4, 0, 4, 0, 0, 4,
	0, 4, 4, 0, 4, 0, 0, 4, 4, 0, 0, 4, 0, 4, 4, 0,
	4, 0, 0, 4, 0, 4, 4, 0, 0, 4, 4, 0, 4, 0, 0, 4,
	0, 4, 4, 0, 4, 0, 0, 4, 4, 0, 0, 4, 0, 4, 4, 0,
	0, 4, 4, 0, 4, 0, 0, 4, 4, 0, 0, 4, 0, 4, 4, 0,
	4, 0, 0, 4, 0, 4, 4, 0, 0, 4, 4, 0, 4, 0, 0, 4}

// Bit mask (2 ^ n), so no need to calculate
var bit_mask = []byte{
	0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80,
}

// t-states for primary opcodes
var t_states = []byte{
	nop:        4,
	ld_bc_nn:   10,
	ld_bc_a:    7,
	inc_bc:     6,
	inc_b:      4,
	dec_b:      4,
	ld_b_n:     7,
	rlca:       4,
	ex_af_af:   4,
	add_hl_bc:  11,
	ld_a_bc:    7,
	dec_bc:     6,
	inc_c:      4,
	dec_c:      4,
	ld_c_n:     7,
	rrca:       4,
	djnz:       8, // 13 or 8 based on condition
	ld_de_nn:   10,
	ld_de_a:    7,
	inc_de:     6,
	inc_d:      4,
	dec_d:      4,
	ld_d_n:     7,
	rla:        4,
	jr_o:       12,
	add_hl_de:  11,
	ld_a_de:    7,
	dec_de:     6,
	inc_e:      4,
	dec_e:      4,
	ld_e_n:     7,
	rra:        4,
	jr_nz_o:    7, // 12 or 7 based on condition
	ld_hl_nn:   10,
	ld_mm_hl:   16,
	inc_hl:     6,
	inc_h:      4,
	dec_h:      4,
	ld_h_n:     7,
	daa:        4,
	jr_z_o:     7, // 12 or 7 based on condition
	add_hl_hl:  11,
	ld_hl_mm:   16,
	dec_hl:     6,
	inc_l:      4,
	dec_l:      4,
	ld_l_n:     7,
	cpl:        4,
	jr_nc_o:    7, // 12 or 7 based on condition
	ld_sp_nn:   10,
	ld_mm_a:    13,
	inc_sp:     6,
	inc_mhl:    11,
	dec_mhl:    11,
	ld_mhl_n:   10,
	scf:        4,
	jr_c:       7, // 12 or 7 based on condition
	add_hl_sp:  11,
	ld_a_mm:    13,
	dec_sp:     6,
	inc_a:      4,
	dec_a:      4,
	ld_a_n:     7,
	ccf:        4,
	ld_b_b:     4,
	ld_b_c:     4,
	ld_b_d:     4,
	ld_b_e:     4,
	ld_b_h:     4,
	ld_b_l:     4,
	ld_b_hl:    7,
	ld_b_a:     4,
	ld_c_b:     4,
	ld_c_c:     4,
	ld_c_d:     4,
	ld_c_e:     4,
	ld_c_h:     4,
	ld_c_l:     4,
	ld_c_hl:    7,
	ld_c_a:     4,
	ld_d_b:     4,
	ld_d_c:     4,
	ld_d_d:     4,
	ld_d_e:     4,
	ld_d_h:     4,
	ld_d_l:     4,
	ld_d_hl:    7,
	ld_d_a:     4,
	ld_e_b:     4,
	ld_e_c:     4,
	ld_e_d:     4,
	ld_e_e:     4,
	ld_e_h:     4,
	ld_e_l:     4,
	ld_e_hl:    7,
	ld_e_a:     4,
	ld_h_b:     4,
	ld_h_c:     4,
	ld_h_d:     4,
	ld_h_e:     4,
	ld_h_h:     4,
	ld_h_l:     4,
	ld_h_hl:    7,
	ld_h_a:     4,
	ld_l_b:     4,
	ld_l_c:     4,
	ld_l_d:     4,
	ld_l_e:     4,
	ld_l_h:     4,
	ld_l_l:     4,
	ld_l_hl:    7,
	ld_l_a:     4,
	ld_hl_b:    7,
	ld_hl_c:    7,
	ld_hl_d:    7,
	ld_hl_e:    7,
	ld_hl_h:    7,
	ld_hl_l:    7,
	halt:       4,
	ld_hl_a:    7,
	ld_a_b:     4,
	ld_a_c:     4,
	ld_a_d:     4,
	ld_a_e:     4,
	ld_a_h:     4,
	ld_a_l:     4,
	ld_a_hl:    7,
	ld_a_a:     4,
	add_a_b:    4,
	add_a_c:    4,
	add_a_d:    4,
	add_a_e:    4,
	add_a_h:    4,
	add_a_l:    4,
	add_a_hl:   7,
	add_a_a:    4,
	adc_a_b:    4,
	adc_a_c:    4,
	adc_a_d:    4,
	adc_a_e:    4,
	adc_a_h:    4,
	adc_a_l:    4,
	adc_a_hl:   7,
	adc_a_a:    4,
	sub_b:      4,
	sub_c:      4,
	sub_d:      4,
	sub_e:      4,
	sub_h:      4,
	sub_l:      4,
	sub_hl:     7,
	sub_a:      4,
	sbc_a_b:    4,
	sbc_a_c:    4,
	sbc_a_d:    4,
	sbc_a_e:    4,
	sbc_a_h:    4,
	sbc_a_l:    4,
	sbc_a_hl:   7,
	sbc_a_a:    4,
	and_b:      4,
	and_c:      4,
	and_d:      4,
	and_e:      4,
	and_h:      4,
	and_l:      4,
	and_hl:     7,
	and_a:      4,
	xor_b:      4,
	xor_c:      4,
	xor_d:      4,
	xor_e:      4,
	xor_h:      4,
	xor_l:      4,
	xor_hl:     7,
	xor_a:      4,
	or_b:       4,
	or_c:       4,
	or_d:       4,
	or_e:       4,
	or_h:       4,
	or_l:       4,
	or_hl:      7,
	or_a:       4,
	cp_b:       4,
	cp_c:       4,
	cp_d:       4,
	cp_e:       4,
	cp_h:       4,
	cp_l:       4,
	cp_hl:      7,
	cp_a:       4,
	ret_nz:     5, // 11 or 5 based on condition
	pop_bc:     10,
	jp_nz_nn:   10,
	jp_nn:      10,
	call_nz_nn: 10, // 17 or 10 based on condition
	push_bc:    11,
	add_a_n:    7,
	rst_00h:    11,
	ret_z:      5, // 11 or 5 based on condition
	ret:        10,
	jp_z_nn:    10,
	prefix_cb:  4,
	call_z_nn:  10, // 17 or 10 based on condition
	call_nn:    17,
	adc_a_n:    7,
	rst_08h:    11,
	ret_nc:     5, // 11 or 5 based on condition
	pop_de:     10,
	jp_nc_nn:   10,
	call_nc_nn: 10, // 17 or 10 based on condition
	push_de:    11,
	sub_n:      7,
	rst_10h:    11,
	ret_c:      5, // 11 or 5 based on condition
	exx:        4,
	jp_c_nn:    10,
	in_a_n:     11,
	out_n_a:    11,
	call_c_nn:  10, // 17 or 10 based on condition
	useIX:      4,
	sbc_a_n:    7,
	rst_18h:    11,
	ret_po:     5, // 11 or 5 based on condition
	pop_hl:     10,
	jp_po_nn:   10,
	ex_sp_hl:   19,
	call_po_nn: 10, // 17 or 10 based on condition
	push_hl:    11,
	and_n:      7,
	rst_20h:    11,
	ret_pe:     5, // 11 or 5 based on condition
	jp_hl:      4,
	jp_pe_nn:   10,
	ex_de_hl:   4,
	call_pe_nn: 10, // 17 or 10 based on condition
	prefix_ed:  4,
	xor_n:      7,
	rst_28h:    11,
	ret_p:      5, // 11 or 5 based on condition
	pop_af:     10,
	jp_p_nn:    10,
	di:         4,
	call_p_nn:  10, // 17 or 10 based on condition
	push_af:    11,
	or_n:       7,
	rst_30h:    11,
	ret_m:      5, // 11 or 5 based on condition
	ld_sp_hl:   6,
	jp_m_nn:    10,
	ei:         4,
	call_m_nn:  10, // 17 or 10 based on condition
	useIY:      4,
	cp_n:       7,
	rst_38h:    11,
}

// t-states for IX/IY prefixed opcodes which values are not just simply +4 t-state
var t_states_ixy = []byte{
	inc_mhl:  23,
	dec_mhl:  23,
	ld_mhl_n: 19,
	ld_b_hl:  19,
	ld_c_hl:  19,
	ld_d_hl:  19,
	ld_e_hl:  19,
	ld_h_hl:  19,
	ld_l_hl:  19,
	ld_hl_b:  19,
	ld_hl_c:  19,
	ld_hl_d:  19,
	ld_hl_e:  19,
	ld_hl_h:  19,
	ld_hl_l:  19,
	ld_hl_a:  19,
	ld_a_hl:  19,
	add_a_hl: 19,
	adc_a_hl: 19,
	sub_hl:   19,
	sbc_a_hl: 19,
	and_hl:   19,
	xor_hl:   19,
	or_hl:    19,
	cp_hl:    19,
	useIX:    4,
	useIY:    4,
	0xFF:     0,
}

var t_states_ed = []byte{
	in_b_c:    12,
	out_c_b:   12,
	sbc_hl_bc: 15,
	ld_mm_bc:  20,
	neg:       8,
	retn:      14,
	im0:       8,
	ld_i_a:    9,
	in_c_c:    12,
	out_c_c:   12,
	adc_hl_bc: 15,
	ld_bc_mm:  20,
	0x4C:      8, // undocumented neg
	reti:      14,
	ld_r_a:    9,
	in_d_c:    12,
	out_c_d:   12,
	sbc_hl_de: 15,
	ld_mm_de:  20,
	0x54:      8,  // undocumented neg
	0x55:      14, // undocumented retn
	im1:       8,
	ld_a_i:    9,
	in_e_c:    12,
	out_c_e:   12,
	adc_hl_de: 15,
	ld_de_mm:  20,
	0x5C:      8, // undocumented neg
	im2:       8,
	ld_a_r:    9,
	in_h_c:    12,
	out_c_h:   12,
	sbc_hl_hl: 15,
	ld_mm_hl2: 20,
	0x64:      8,  // undocumented neg
	0x65:      14, // undocumented retn
	rrd:       18,
	in_l_c:    12,
	out_c_l:   12,
	adc_hl_hl: 15,
	ld_hl_mm2: 20,
	0x6C:      8, // undocumented neg
	rld:       18,
	in_f_c:    12,
	out_c_f:   12,
	sbc_hl_sp: 15,
	ld_mm_sp:  20,
	0x74:      8,  // undocumented neg
	0x75:      14, // undocumented retn
	in_a_c:    12,
	out_c_a:   12,
	adc_hl_sp: 15,
	ld_sp_mm:  20,
	0x7C:      8,  // undocumented neg
	0x7D:      14, // undocumented reti
	ldi:       16,
	cpi:       16,
	ini:       16,
	outi:      16,
	ldd:       16,
	cpd:       16,
	ind:       16,
	outd:      16,
	ldir:      16, // 21 or 16 based on condition
	cpir:      16, // 21 or 16 based on condition
	inir:      16, // 21 or 16 based on condition
	otir:      16, // 21 or 16 based on condition
	lddr:      16, // 21 or 16 based on condition
	cpdr:      16, // 21 or 16 based on condition
	indr:      16, // 21 or 16 based on condition
	otdr:      16, // 21 or 16 based on condition
	0xFF:      0,
}
